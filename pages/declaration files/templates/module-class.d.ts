// Type definitions for [~НАЗВАНИЕ БИБЛИОТЕКИ~] [~НЕОБЯЗАТЕЛЬНЫЙ НОМЕР ВЕРСИИ~]
// Project: [~НАЗВАНИЕ ПРОЕКТА~]
// Definitions by: [~ВАШЕ ИМЯ~] <[~ВАШ АДРЕС В ИНТЕРНЕТЕ~]>

/*~ Это шаблон модуля, который является классом. Его нужно переименовать в index.d.ts
 *~ и поместить в папку с тем же именем, что и имя модуля.
 *~ Например, если вы создаете файл для "super-greeter", то этот файл
 *~ должен называться "super-greeter/index.d.ts"
 */

/*~ Обратите внимание, что ES6-модули не могут напрямую экспортировать объекты.
 *~ Этот файл следует импортировать, используя CommonJS:
 *~   import x = require('someLibrary');
 *~
 *~ Обратитесь к документации, чтобы узнать о распространенных способах
 *~ обхода данного ограничения для ES6-модулей.
 */

/*~ Если это UMD-модуль, который предоставляет глобальную переменную 'myClassLib'
 *~ при загрузке в окружении без загрузчика модулей, объявите эту переменную здесь.
 *~ В противном случае удалите это объявление.
 */
export as namespace myClassLib;

/*~ Это объявление указывает, что функция-конструктор класса экспортируется
 *~ из данного файла
 */
export = MyClass;

/*~ Добавьте в этот класс методы и свойства данного модуля */
declare class MyClass {
	constructor(someParam?: string);

	someProperty: string[];

	myMethod(opts: MyClass.MyClassMethodOptions): number;
}

/*~ Если этот модуль должен предоставлять типы, то их можно поместить
 *~ в этот блок
 */
declare namespace MyClass {
	export interface MyClassMethodOptions {
		width?: number;
		height?: number;
	}
}
